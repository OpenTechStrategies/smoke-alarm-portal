#!/bin/sh

# Run this from the top of your smoke-alarm-portal source tree to
# re-initialize the static data in your Smoke Alarm Portal databases.
# The static data is the US address data and the Red Cross region
# data; your smoke alarm requests data will not be affected.
#
# This script assumes CouchDB is already running on localhost; if it's
# not, you'll see all sorts of error spew.
#
# WARNING: If your smoke alarm requests database already exists, you
# will see a warning about that when this script tries to re-create
# that database.
#
# Notes about the data:
#
# The data used to determine whether the user is in a valid region
# served by the application comes from the Counties listed in PDFs
# from the Red Cross and a Zip Code database of the state.  See these
# files in the "data" directory:
# 
#   - US Addresses with zip code & county: data/us_addresses*.json
#   - Counties Included in Red Cross Region: data/selected_counties.json
#
# In addition to the above, this script also sets up some functions
# used for CouchDB views.

if [ ! -f ./set-up-databases ]; then
    echo "ERROR: You're not at the top level of a smoke-alarm-portal source tree."
    exit 1
fi

echo "Dropping static databases..."

### Drop databases.
#
# If we wanted to re-initialize the requests database too, we'd delete
# 'smoke_alarm_requests' here.
curl -X DELETE http://127.0.0.1:5984/selected_counties
curl -X DELETE http://127.0.0.1:5984/us_addresses

echo "Done."
echo ""

echo "Re-creating the static databases..."

### Recreate all the databases.
curl -X PUT http://127.0.0.1:5984/selected_counties
curl -X PUT http://127.0.0.1:5984/us_addresses
echo "Done."
echo ""

echo "Creating the 'smoke_alarm_requests' database.  Do not be alarmed at"
echo "an error about the database not being created because it already exists;"
echo "that just means you already had some data, which this script leaves be."
echo ""
curl -X PUT http://127.0.0.1:5984/smoke_alarm_requests
echo ""
echo "Done."
echo ""

### Ensure the address data is in string-zip-codes form.
cd data
if grep -q '{"zip":[0-9][0-9][0-9][0-9][0-9],' us_addresses.json; then
    echo ""
    echo "ERROR: Your zip code data is not fully stringified."
    echo ""
    echo "       You should stringify it with 'data/stringify-zip-codes' and then commit up"
    echo "       the newly-stringified copies before proceeding.  Once you have done that"
    echo "       you can rerun this script, and you should not get this error again."
    echo ""
    exit 1
fi 
cd ..

### Load data.
#
# Note that passing the -s / --silent flag to curl won't prevent
# massive spew from these commands; that's why we redirect to
# /dev/null instead.
echo ""
echo "Loading data..."
echo ""
for name in 0 1 2 3 4 5 6 7 8 9; do
    echo -n "  us_addresses_${name}..."
    curl -s -H 'Content-Type: application/json' -X POST \
         http://localhost:5984/us_addresses/_bulk_docs  \
         -d @data/us_addresses_${name}.json             \
      > /dev/null
    echo "done"
done
echo -n "  selected_counties..."
curl -s -H 'Content-Type: application/json' -X POST     \
     http://localhost:5984/selected_counties/_bulk_docs \
     -d @data/selected_counties.json                    \
  > /dev/null
echo "done"
echo ""

### Create the views.
#
# These js functions are used to create views in CouchDB.  Couch "views" are
# somewhat like queries, in that they return matching results from the
# database.  In these views, we search by a "key."  For more about
# CouchDB views, see http://guide.couchdb.org/editions/1/en/views.html.
#
# ---------------------------------------------------------------------
# DETAILED INSTRUCTIONS FOR CREATING THESE VIA FUTON WEB INTERFACE
#
# You should be able to create these views just by running this
# script.  However, if you run into problems, you can do it via the
# Futon web interface too.  Below is a detailed walk-through; it might
# also be a useful read for understanding more about what views do.
#
# Go to http://127.0.0.1:5984/_utils/.  You should see a list of
# databases, e.g., "smoke_alarm_requests", "us_addresses", etc.
#
# Say we're going to create the 'by-zip-code' view function in
# 'us_addresses'.  Click on 'us_addresses' to enter that database.
# In the upper right, change the "View:" selector, which is probably
# set to "All documents" by default, to "Design documents" instead
#
#   (Note: Design documents are a special kind of document in
#   CouchDB, containing application code that CouchDB then uses to
#   provide applications with an API for interacting with the
#   database in which the design document resides.  For example, a
#   design doc might offers Javascript functions used for the "map"
#   phase of a Map-Reduce process; that's how we're using them in
#   this application.  For more about design documents in CouchDB,
#   see http://guide.couchdb.org/editions/1/en/design.html.)
#
# Now you're probably looking at a page showing 0 rows, because there
# are no design docs for 'us_addresses' yet.  Click 'New Document' in
# the upper left, and immediately replace the auto-generated _id
# (some garbage like "e5db861e7bacaa5565d6f7b150885a38") with this:
# "_design/us_addresses"
#
# Now we've named a design document for this database, but the design
# doc doesn't yet have any views (which are written in Javascript).
# Let's add one.
# 
# First, tell the design document what language views are written in.
# Click on "Add field" at the upper right.  For the field's name,
# enter "language", and for its value (double click on 'null' to set
# the value -- yes, I know that's not intuitive) put "javascript".
#
# Now to finally add the code!  Click "Add field" again, and for the
# new field's _id put "views".  The value is going to be a JSON
# dictionary mapping view names to view code.  (Well, actually it
# maps view names to sub-dictionaries that further map view function
# types to the corresponding view code.  But the only view function
# type we care about here is the map, as you'll see.)  The value will
# look like this, with real code substituted in of course:
# 
#   { "by-zip-code": { "map" : "JAVASCRIPT_CODE_HERE" } }
# 
# The Javascript code in question is written out in this file with
# nice indentation and multiple lines, e.g.:
#
#   function(doc) {
#     if (doc.zip) {
#       emit(doc.zip, [doc.county, doc.state]);
#     }
#   }
#
# You could put it in the view like that, or you could compactify it
# as below -- either way is fine:
#
#   { "by-zip-code": { "map" : "function(doc) {if (doc.zip){emit(doc.zip, [doc.county, doc.state]);}}" } }
#
# Finally -- VERY IMPORTANT -- don't forget to go to the upper right
# and click "Save Document".  Now you have a design doc with views!
#
# To test the view -- that is, run the MapReduce process for which
# this view provides the map function -- try this:
#
#   $ curl -H 'Content-Type: application/json' -X GET "http://127.0.0.1:5984/us_addresses/_design/us_addresses/_view/by-zip-code?key=%2260202%22"
#
#   (Note: the "%22" around the zip code is just URL-escaping for "/".  
#   CouchDB has a rule that "/" in a document ID must be escaped in a
#   URL, but makes an exception for the "/" in the IDs of design
#   documents, because those IDs are seen by human eyes so often and
#   need to be recognizeable & readable to aid debugging.)
#
# From that query, you should get back a result something like this:
#
#  {"total_rows":42521,"offset":42521,"rows":[
#  
#  ]}
#
# Fun trick: try running the query a second time and notice how
# vastly much more quickly the result comes back this time!  CouchDB
# caches view results, and even updates the cache when you update the
# database.  So things are slow the first time, but then jumping fast
# after that.
#
# ---------------------------------------------------------------------
echo "Creating views..."

## by-zip-code
#
# When creating this view in futon, you should enter these fields and values:
#
# Takes: a zipcode as the key
# Returns: a JSON array with zipcodes as keys and [county, state]
# pairs as values.
# Example call:
# curl -H 'Content-Type: application/json' -X GET http://localhost:5984/us_addresses/_design/us_addresses/_view/by-zip-code?key=%2260101%22
curl -X PUT http://localhost:5984/us_addresses/_design/us_addresses -d \
'{
   "_id": "_design/us_addresses",
   "language": "javascript",
   "views": { "by-zip-code": { "map": "function(doc) { if (doc.zip) { emit(doc.zip, [doc.county, doc.state]); } }" } }
}'

## county-matchup
#
# Takes: a state name and county name as keys
# Returns: a JSON array with county name as key and Red Cross region
# as value.
# Example call:
# curl -H 'Content-Type: application/json' -X GET http://localhost:5984/selected_counties/_design/selected_counties/_view/county-matchup?key=%5B%22Idaho%22,%22Ada%22%5D
curl -X PUT http://localhost:5984/selected_counties/_design/selected_counties -d \
'{
   "_id": "_design/selected_counties",
   "language": "javascript",
   "views": { "county-matchup": { "map": "function(doc) { if (doc.state && doc.county && doc.region) { emit([doc.state, doc.county], doc.region); } }" } }
}'

echo "Done."
